From 170e26a1c088bcd8cddf27b215a93c21ee9fb228 Mon Sep 17 00:00:00 2001
From: Daniel Hill <daniel@gluo.nz>
Date: Mon, 28 Aug 2023 22:10:03 +1200
Subject: [PATCH] Deferred cursor support.

See deferred-cursor-move branch on: github.com/YellowOnion/wlroots.git
---
 include/sway/commands.h            |  1 +
 include/sway/tree/view.h           |  1 +
 sway/commands.c                    |  1 +
 sway/commands/max_cursor_latency.c | 32 ++++++++++++++++++++++++++++++
 sway/desktop/output.c              |  6 ++++++
 sway/input/seat.c                  |  5 +++++
 sway/ipc-json.c                    |  1 +
 sway/meson.build                   |  1 +
 sway/tree/view.c                   |  1 +
 9 files changed, 49 insertions(+)
 create mode 100644 sway/commands/max_cursor_latency.c

diff --git a/include/sway/commands.h b/include/sway/commands.h
index 5210d3ba..4ae6fe17 100644
--- a/include/sway/commands.h
+++ b/include/sway/commands.h
@@ -153,6 +153,7 @@ sway_cmd cmd_kill;
 sway_cmd cmd_layout;
 sway_cmd cmd_log_colors;
 sway_cmd cmd_mark;
+sway_cmd cmd_max_cursor_latency;
 sway_cmd cmd_max_render_time;
 sway_cmd cmd_mode;
 sway_cmd cmd_mouse_warping;
diff --git a/include/sway/tree/view.h b/include/sway/tree/view.h
index f6032221..679f0f18 100644
--- a/include/sway/tree/view.h
+++ b/include/sway/tree/view.h
@@ -114,6 +114,7 @@ struct sway_view {
 	} events;
 
 	int max_render_time; // In milliseconds
+	int max_cursor_latency; // In microseconds
 
 	enum seat_config_shortcuts_inhibit shortcuts_inhibit;
 
diff --git a/sway/commands.c b/sway/commands.c
index c2c12ee6..8e915314 100644
--- a/sway/commands.c
+++ b/sway/commands.c
@@ -122,6 +122,7 @@ static const struct cmd_handler command_handlers[] = {
 	{ "kill", cmd_kill },
 	{ "layout", cmd_layout },
 	{ "mark", cmd_mark },
+	{ "max_cursor_latency", cmd_max_cursor_latency },
 	{ "max_render_time", cmd_max_render_time },
 	{ "move", cmd_move },
 	{ "nop", cmd_nop },
diff --git a/sway/commands/max_cursor_latency.c b/sway/commands/max_cursor_latency.c
new file mode 100644
index 00000000..12654c1d
--- /dev/null
+++ b/sway/commands/max_cursor_latency.c
@@ -0,0 +1,32 @@
+#include <strings.h>
+#include "sway/commands.h"
+#include "sway/config.h"
+#include "sway/tree/view.h"
+
+struct cmd_results *cmd_max_cursor_latency(int argc, char **argv) {
+	if (!argc) {
+		return cmd_results_new(CMD_INVALID, "Missing max cursor latency argument.");
+	}
+
+	int max_cursor_latency;
+	if (!strcmp(*argv, "off")) {
+		max_cursor_latency = 0;
+	} else {
+		char *end;
+		max_cursor_latency = strtol(*argv, &end, 10);
+		if (*end || max_cursor_latency <= 0) {
+			return cmd_results_new(CMD_INVALID, "Invalid max cursor latency.");
+		}
+	}
+
+	struct sway_container *container = config->handler_context.container;
+	if (!container || !container->view) {
+		return cmd_results_new(CMD_INVALID,
+				"Only views can have a max_cursor_latency");
+	}
+
+	struct sway_view *view = container->view;
+	view->max_cursor_latency = max_cursor_latency;
+
+	return cmd_results_new(CMD_SUCCESS, NULL);
+}
diff --git a/sway/desktop/output.c b/sway/desktop/output.c
index 3a2ae403..dc06c7e3 100644
--- a/sway/desktop/output.c
+++ b/sway/desktop/output.c
@@ -261,6 +261,10 @@ static bool output_can_tear(struct sway_output *output) {
 
 static int output_repaint_timer_handler(void *data) {
 	struct sway_output *output = data;
+	struct timespec now;
+
+	clock_gettime(CLOCK_MONOTONIC, &now);
+	wlr_output_cursor_move_any_expired(output->wlr_output, &now);
 
 	output->wlr_output->frame_pending = false;
 	if (!output->enabled) {
@@ -280,6 +284,8 @@ static int output_repaint_timer_handler(void *data) {
 		return 0;
 	}
 
+	wlr_output_cursor_move_all_deferred(wlr_output, &now);
+
 	struct wlr_output_state pending;
 	wlr_output_state_init(&pending);
 	if (!wlr_scene_output_build_state(output->scene_output, &pending, &opts)) {
diff --git a/sway/input/seat.c b/sway/input/seat.c
index 0dd26290..9c04aaa9 100644
--- a/sway/input/seat.c
+++ b/sway/input/seat.c
@@ -1202,9 +1202,11 @@ static void seat_set_workspace_focus(struct sway_seat *seat, struct sway_node *n
 		seat_send_focus(&container->node, seat);
 	}
 
+	int max_cursor_latency = 0;
 	// emit ipc events
 	set_workspace(seat, new_workspace);
 	if (container && container->view) {
+		max_cursor_latency = container->view->max_cursor_latency;
 		ipc_event_window(container, "focus");
 	}
 
@@ -1254,6 +1256,9 @@ static void seat_set_workspace_focus(struct sway_seat *seat, struct sway_node *n
 		workspace_consider_destroy(last_workspace);
 	}
 
+	if (seat->cursor)
+		wlr_cursor_set_max_latency(seat->cursor->cursor, max_cursor_latency * 1000);
+
 	seat->has_focus = true;
 
 	if (config->smart_gaps && new_workspace) {
diff --git a/sway/ipc-json.c b/sway/ipc-json.c
index fc1df2ac..ae9a32ab 100644
--- a/sway/ipc-json.c
+++ b/sway/ipc-json.c
@@ -594,6 +594,7 @@ static void ipc_json_describe_view(struct sway_container *c, json_object *object
 	json_object_object_add(object, "geometry", ipc_json_create_rect(&geometry));
 
 	json_object_object_add(object, "max_render_time", json_object_new_int(c->view->max_render_time));
+	json_object_object_add(object, "max_cursor_latency", json_object_new_int(c->view->max_cursor_latency));
 
 	json_object_object_add(object, "allow_tearing", json_object_new_boolean(view_can_tear(c->view)));
 
diff --git a/sway/meson.build b/sway/meson.build
index 8042c89b..519ff0ea 100644
--- a/sway/meson.build
+++ b/sway/meson.build
@@ -74,6 +74,7 @@ sway_sources = files(
 	'commands/kill.c',
 	'commands/mark.c',
 	'commands/max_render_time.c',
+	'commands/max_cursor_latency.c',
 	'commands/opacity.c',
 	'commands/include.c',
 	'commands/input.c',
diff --git a/sway/tree/view.c b/sway/tree/view.c
index ebf98faa..f81895f3 100644
--- a/sway/tree/view.c
+++ b/sway/tree/view.c
@@ -7,6 +7,7 @@
 #include <wlr/types/wlr_ext_foreign_toplevel_list_v1.h>
 #include <wlr/types/wlr_foreign_toplevel_management_v1.h>
 #include <wlr/types/wlr_fractional_scale_v1.h>
+#include <wlr/types/wlr_cursor.h>
 #include <wlr/types/wlr_output_layout.h>
 #include <wlr/types/wlr_server_decoration.h>
 #include <wlr/types/wlr_subcompositor.h>
-- 
2.49.0

